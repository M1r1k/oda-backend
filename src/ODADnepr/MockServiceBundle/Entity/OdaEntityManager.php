<?php

namespace ODADnepr\MockServiceBundle\Entity;

use Doctrine\Common\Persistence\ObjectManager;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OdaEntityManager
{
    /* @var ObjectManager */
    protected $entityManager;

    /**
     * Constructor.
     *
     * @param ObjectManager $entityManager
     */
    public function __construct(ObjectManager $entityManager)
    {
        $this->entityManager = $entityManager;
    }

    public function setAddress(Address $address = null)
    {
        if (!$address) {
            return $address;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:Address');
        $id = $address->getId();
        if (!$id || !($address_entity = $repo->find($address->getId()))) {
            $district = $this->setDistrict($address->getDistrict());
            $city = $this->setCity($address->getCity());
            $street = $this->setStreet($address->getStreet());
            $house = $this->setHouse($address->getHouse());
            $address_entity = new Address();
            $address_entity->setStreet($street);
            $address_entity->setCity($city);
            $address_entity->setDistrict($district);
            $address_entity->setHouse($house);
            $address_entity->setFlat($address->getFlat());
            $this->entityManager->persist($address_entity);
            $this->entityManager->flush();
        }

        return $address_entity;
    }

    public function setDistrict(District $district_object = null)
    {
        if (!$district_object) {
            return $district_object;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:District');
        $district = $repo->find($district_object->getId());
        if (!$district) {
            throw new NotFoundHttpException('District with ID=' . $district_object->getId() . ' was not found');
        }

        return $district;
    }

    public function setCity(City $city_object = null)
    {
        if (!$city_object) {
            return $city_object;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:City');
        $city = $repo->find($city_object->getId());
        if (!$city) {
            throw new NotFoundHttpException('City with ID=' . $city_object->getId() . ' was not found');
        }

        return $city;
    }

    public function setStreet(Street $street_object = null)
    {
        if (!$street_object) {
            return $street_object;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:Street');
        $street = $repo->find($street_object->getId());

        if (!$street) {
            throw new NotFoundHttpException('Street with ID=' . $street_object->getId() . ' was not found');
        }

        return $street;
    }

    public function setHouse(House $house_object = null)
    {
        if (!$house_object) {
            return $house_object;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:House');
        $house = $repo->find($house_object->getId());
        if (!$house) {
            throw new NotFoundHttpException('House with ID=' . $house_object->getId() . ' was not found');
        }

        return $house;
    }

    public function setFacilities(Facilities $facilitiesObject = null) {
        if (!$facilitiesObject) {
            return $facilitiesObject;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:Facilities');
        $facilities = $repo->find($facilitiesObject->getId());
        if (!$facilities) {
            throw new NotFoundHttpException('Facilities with ID=' . $facilitiesObject->getId() . ' was not found');
        }

        return $facilities;
    }

    public function setSocialCondition(SocialCondition $socialConditionObject = null) {
        if (!$socialConditionObject) {
            return $socialConditionObject;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:SocialCondition');
        $socialCondition = $repo->find($socialConditionObject->getId());
        if (!$socialCondition) {
            throw new NotFoundHttpException('Social condition with ID=' . $socialConditionObject->getId() . ' was not found');
        }

        return $socialCondition;
    }

    public function getUser(User $user_object = null)
    {
        if (!$user_object) {
            return $user_object;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:User');

        $user = $repo->find($user_object->getId());
        if (!$user) {
            throw new NotFoundHttpException('Ticket category with ID=' . $user->getId() . ' was not found');
        }

        return $user;
    }

    public function getManager($manager_object = null)
    {
        if (!$manager_object) {
            return $manager_object;
        }

        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:Manager');

        if (!isset($manager_object->id) || !($manager = $repo->find($manager_object->id))) {
            $manager = new Manager();
            $manager->setName($manager_object->name);
            $this->entityManager->persist($manager);
            $this->entityManager->flush();
        }

        return $manager;
    }

    public function getCategory(TicketCategory $categoryObject = null)
    {
        if (!$categoryObject) {
            return $categoryObject;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:TicketCategory');

        $category = $repo->find($categoryObject->getId());
        if (!$category) {
            throw new NotFoundHttpException('Ticket category with ID=' . $categoryObject->getId() . ' was not found');
        }

        return $category;
    }

    public function getType(TicketType $typeObject = null)
    {
        if (!$typeObject) {
            return $typeObject;
        }
        $repo = $this->entityManager->getRepository('ODADneprMockServiceBundle:TicketType');

        $type = $repo->find($typeObject->getId());
        if (!$type) {
            throw new NotFoundHttpException('Ticket type with ID=' . $typeObject->getId() . ' was not found');
        }

        return $type;
    }
}
